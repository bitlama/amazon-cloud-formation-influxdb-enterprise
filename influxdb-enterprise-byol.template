{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "InfluxDB Enterprise (BYOL)",
  "Parameters": {
    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
    },
    "Subnets" : {
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
    },
    "LicenseKey": {
      "Description": "A license key is required to deploy this solution. Visit https://portal.influxdata.com/users/aws to sign up for a free trial, E.g a1b2c3d4-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
      "Type": "String"
    },
    "Username": {
      "Description": "Username for cluster administrator",
      "Type": "String"
    },
    "Password": {
      "Description": "Password for cluster administrator",
      "Type": "String",
      "NoEcho": true
    },
    "DataNodeInstanceCount": {
      "Description": "Number of data nodes",
      "Type": "Number",
      "Default": 2
    },
    "DataNodeInstanceType": {
      "Description": "Instance type for data nodes",
      "Type": "String",
      "Default": "m4.large",
      "AllowedValues": [
        "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
        "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "m5.12xlarge", "m5.24xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "c5.large", "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.18xlarge",
        "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
        "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge", "r5.12xlarge", "r5.24xlarge",
        "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "DataNodeDiskSize": {
      "Description": "Size in GB of the EBS gp2 volume on each data node",
      "Type": "Number",
      "Default": 100
    },
    "MetaNodeInstanceCount": {
      "Description": "Number of meta nodes",
      "Type": "Number",
      "Default": 3
    },
    "MetaNodeInstanceType": {
      "Description": "Instance type for meta nodes",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
        "t2.small", "t2.medium", "t2.large"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Rules": {
    "SubnetsInVPC": {
      "Assertions": [
        {
          "Assert": {
            "Fn::EachMemberIn": [
              {
                "Fn::ValueOfAll": [
                  "AWS::EC2::Subnet::Id",
                  "VpcId"
                ]
              },
              {
                "Fn::RefAll": "AWS::EC2::VPC::Id"
              }
            ]
          },
          "AssertDescription": "All subnets must exist in the VPC"
        }
      ]
    }
  },
  "Mappings": {
    "ClusterRegion": {
      "us-east-1": { "BYOL": "ami-0840759c3127675f7" }
    }
  },
  "Resources": {
    "DataNodeAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "LaunchConfigurationName": { "Ref": "DataNodeLaunchConfiguration" },
        "MinSize": "2",
        "MaxSize": "100",
        "DesiredCapacity": { "Ref": "DataNodeInstanceCount" },
        "TargetGroupARNs": [ { "Ref": "ALBTargetGroup" } ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": 1,
          "MaxBatchSize": 1,
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": true
        }
      }
    },
    "DataNodeLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "ClusterRegion", { "Ref": "AWS::Region" }, "BYOL" ] },
        "InstanceType": { "Ref": "DataNodeInstanceType" },
        "SecurityGroups": [ { "Ref": "InfluxDBSecurityGroup" } ],
        "KeyName": { "Ref": "KeyName" },
        "EbsOptimized": true,
        "IamInstanceProfile": { "Ref": "InfluxDBInstanceProfile" },
        "BlockDeviceMappings":
        [
          {
            "DeviceName" : "/dev/xvda",
            "Ebs" : { "DeleteOnTermination" : true }
          },
          {
            "DeviceName" : "/dev/xvdh",
            "Ebs" : {
              "VolumeSize": { "Ref": "DataNodeDiskSize" },
              "VolumeType": "gp2",
              "Encrypted": true
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
              [
                "#!/usr/bin/env bash\n",

                "set -euxo pipefail\n",

                "echo 'Running startup script...'\n",

                "stack_name=", { "Ref": "AWS::StackName" }, "\n",
                "aws_region=", { "Ref": "AWS::Region" }, "\n",
                "license_key=", { "Ref": "LicenseKey" }, "\n",
                "node_type=\"data\"\n",
                "username=", { "Ref": "Username" }, "\n",
                "password=", { "Ref": "Password" }, "\n",

                "source \"/opt/influxdb/setup.sh\"\n",

                "run \"${stack_name}\" \"${aws_region}\" \"${license_key}\" \"${node_type}\" \"${username}\" \"${password}\"\n"
              ]
            ]
          }
        }
      }
    },
    "MetaNodeAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "LaunchConfigurationName": { "Ref": "MetaNodeLaunchConfiguration" },
        "MinSize": "3",
        "MaxSize": "3",
        "DesiredCapacity": { "Ref": "MetaNodeInstanceCount" }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": 2,
          "MaxBatchSize": 1,
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": true
        }
      }
    },
    "MetaNodeLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "ClusterRegion", { "Ref": "AWS::Region" }, "BYOL" ] },
        "InstanceType": { "Ref": "MetaNodeInstanceType" },
        "SecurityGroups": [ { "Ref": "InfluxDBSecurityGroup" } ],
        "KeyName": { "Ref": "KeyName" },
        "IamInstanceProfile": { "Ref": "InfluxDBInstanceProfile" },
        "BlockDeviceMappings":
        [
          {
            "DeviceName" : "/dev/xvda",
            "Ebs" : { "DeleteOnTermination" : true }
          },
          {
            "DeviceName" : "/dev/xvdh",
            "Ebs" : {
              "VolumeSize": 10,
              "VolumeType": "gp2",
              "Encrypted": true
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
              [
                "#!/usr/bin/env bash\n",

                "set -euxo pipefail\n",

                "echo 'Running startup script...'\n",

                "stack_name=", { "Ref": "AWS::StackName" }, "\n",
                "aws_region=", { "Ref": "AWS::Region" }, "\n",
                "license_key=", { "Ref": "LicenseKey" }, "\n",
                "node_type=\"meta\"\n",
                "username=", { "Ref": "Username" }, "\n",
                "password=", { "Ref": "Password" }, "\n",

                "source \"/opt/influxdb/setup.sh\"\n",

                "run \"${stack_name}\" \"${aws_region}\" \"${license_key}\" \"${node_type}\" \"${username}\" \"${password}\"\n"
              ]
            ]
          }
        }
      }
    },
    "ApplicationLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Subnets" : { "Ref" : "Subnets"}
      }
    },
    "ALBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
        "Port" : 8086,
        "Protocol" : "HTTP"
      }
    },
    "ALBTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 3,
        "Port" : 80,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "VpcId" : {"Ref" : "VpcId"}
      }
    },
    "InfluxDBInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {"Roles": [{"Ref": "InfluxDBRole"}]}
    },
    "InfluxDBRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["ec2.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "InfluxDBPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags",
                    "ec2:DescribeTags",
                    "ec2:DescribeInstances",
                    "autoscaling:DescribeAutoScalingGroups"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "InfluxDBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow traffic on ports for InfluxDB, and SSH",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "CidrIp": { "Ref": "SSHLocation" } },
          { "IpProtocol": "tcp", "FromPort": 8086, "ToPort": 8086, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 8088, "ToPort": 8088, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 8089, "ToPort": 8089, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 8091, "ToPort": 8091, "CidrIp": "0.0.0.0/0" }
        ],
        "VpcId" : { "Ref" : "VpcId" }
      }
    }
  }
}
