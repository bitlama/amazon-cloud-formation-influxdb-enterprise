{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "InfluxDB Enterprise (BYOL)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VpcId",
                        "Subnets",
                        "KeyName",
                        "SSHLocation"
                    ]
                },
                {
                    "Label": {
                        "default": "InfluxDB Configuration"
                    },
                    "Parameters": [
                        "LicenseKey",
                        "Username",
                        "Password",
                        "InfluxDBVersion",
                        "TelegrafVersion"
                    ]
                },
                {
                    "Label": {
                        "default": "InfluxDB Data Node Configuration"
                    },
                    "Parameters": [
                        "DataNodeInstanceCount",
                        "DataNodeInstanceType",
                        "DataNodeDiskSize"
                    ]
                },
                {
                    "Label": {
                        "default": "InfluxDB Meta Node Configuration"
                    },
                    "Parameters": [
                        "MetaNodeInstanceCount",
                        "MetaNodeInstanceType"
                    ]
                }
            ],
            "ParameterLabels": {
                "VpcId": {
                    "default": "VPC ID"
                },
                "Subnets": {
                    "default": "Subnets (must be in the same VPC)"
                },
                "KeyName": {
                    "default": "SSH Key Name"
                },
                "SSHLocation": {
                    "default": "SSH Access CIDR (Public IPv4 address range of the administrator's network)"
                },
                "LicenseKey": {
                    "default": "InfluxDB Enterprise License Key"
                },
                "Username": {
                    "default": "InfluxDB Administrator Username"
                },
                "Password": {
                    "default": "InfluxDB Administrator Password"
                },
                "InfluxDBVersion": {
                    "default": "InfluxDB Enterprise Version"
                },
                "TelegrafVersion": {
                    "default": "Telegraf Version"
                },
                "DataNodeInstanceCount": {
                    "default": "InfluxDB Data Node Instance Count"
                },
                "DataNodeInstanceType": {
                    "default": "InfluxDB Data Node Instance Type"
                },
                "DataNodeDiskSize": {
                    "default": "InfluxDB Data Node Disk Size"
                },
                "MetaNodeInstanceCount": {
                    "default": "InfluxDB Meta Node Instance Count"
                },
                "MetaNodeInstanceType": {
                    "default": "InfluxDB Meta Node Instance Type"
                }
            }
        }
    },
    "Parameters": {
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
            "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
        },
        "Subnets": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Description": "A list of SubnetIds in your Virtual Private Cloud (VPC) where nodes will be created.",
            "ConstraintDescription": "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
        },
        "AvailabilityZones": {
            "Type": "List<AWS::EC2::AvailabilityZone::Name>",
            "Description": "A list of Availability Zones for the SubnetIds parameter. AZs should be in the same order as the SubnetIds."
        },
        "LicenseKey": {
            "Description": "A license key is required to deploy this solution, E.g a1b2c3d4-xxxx-xxxx-xxxx-xxxxxxxxxxxx. Visit https://portal.influxdata.com/users/aws for a free trial",
            "Type": "String"
        },
        "Username": {
            "Description": "Username for the initial cluster administrator user",
            "Type": "String"
        },
        "Password": {
            "Description": "Password for cluster administrator user",
            "Type": "String",
            "NoEcho": true
        },
        "InfluxDBVersion": {
            "Description": "Version of InfluxDB Enterprise",
            "Type": "String",
            "Default": "1.7.7"
        },
        "TelegrafVersion": {
            "Description": "Version of Telegraf",
            "Type": "String",
            "Default": "1.11.2"
        },
        "DataNodeInstanceCount": {
            "Description": "Number of data nodes",
            "Type": "Number",
            "Default": 2
        },
        "DataNodeInstanceType": {
            "Description": "Instance type for data nodes",
            "Type": "String",
            "Default": "m5.large",
            "AllowedValues": [
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.12xlarge",
                "m5.24xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "DataNodeDiskSize": {
            "Description": "Size in GB of the EBS gp2 volume on each data node",
            "Type": "Number",
            "Default": 100
        },
        "MetaNodeInstanceCount": {
            "Description": "Number of meta nodes",
            "Type": "Number",
            "Default": 3
        },
        "MetaNodeInstanceType": {
            "Description": "Instance type for meta nodes",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "t2.large"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Outputs": {
        "InfluxDBAPIEndpoint": {
            "Description": "The ALB endpoint that can be used to access the InfluxDB API. Listens on port 8086.",
            "Value": {
                "Fn::GetAtt": [
                    "InfluxDBLoadBalancer",
                    "DNSName"
                ]
            }
        }
    },
    "Mappings": {
        "AMIRegionMap": {
            "us-east-1": {
                "Data": "ami-086e1e301ef89a7a7",
                "Meta": "ami-01f4a0c2d4309c347",
                "Monitor": "ami-09293eb6f6d59e3ed"
            }
        }
    },
    "Resources": {
        "DataNodeLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": [
                "DataNodeEniOne"
            ],
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "SetupNode": [
                            "AttachNetwork",
                            "MountVolume",
                            "StartInfluxDB"
                        ]
                    },
                    "AttachNetwork": {
                        "commands": {
                            "01_attach_network": {
                                "Fn:Join": [
                                    "",
                                    [
                                        "# If network interface is not attached to this instance, then attach it\n",
                                        "INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )\n",
                                        "ENI_STATUS=$( aws ec2 describe-network-interfaces",
                                        "        --network-interface-ids ",
                                        {
                                            "Ref": "DataNodeEniOne"
                                        },
                                        "        --filters \"Name=attachment.instance-id,Values=$INSTANCE_ID\"",
                                        "        --query \"NetworkInterfaces[0].Attachment.Status\"",
                                        "        --output text )\n",
                                        "if [ $ENI_STATUS != 'attached' ]; then\n",
                                        "# Wait until network interface is available\n",
                                        "aws ec2 wait network-interface-available --network-interface-ids ",
                                        {
                                            "Ref": "DataNodeEniOne"
                                        },
                                        "\n",
                                        "aws ec2 attach-network-interface",
                                        "        --region ",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        "        --network-interface-id ",
                                        {
                                            "Ref": "DataNodeEniOne"
                                        },
                                        "        --instance-id $INSTANCE_ID",
                                        "        --device-index 1\n",
                                        "# Reload network to automatically enable eth1 via Amazon Linux 2 ec2-net-utils\n",
                                        "systemctl restart network\n",
                                        "fi\n"
                                    ]
                                ]
                            }
                        }
                    },
                    "AttachVolume": {
                        "commands": {
                            "01_attach_volume": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "aws ec2 wait volume-available "
                                    ]
                                ]
                            }
                        }
                    },
                    "MountVolume": {
                        "commands": {
                            "01_mount_volumes": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "mkfs -t ext4 /dev/xvdh",
                                        "\n",
                                        "mkdir /mnt/influxdb",
                                        "\n",
                                        "mount -a",
                                        "\n",
                                        "mkdir /mnt/influxdb/meta /mnt/influxdb /mnt/influxdb/wal /mnt/influxdb/hh",
                                        "\n",
                                        "chown -R influxdb:influxdb /mnt/influxdb",
                                        "\n",
                                        "echo -e \"/dev/xvdh\t/mnt/influxdb\text4\tdefaults,nofail\t0\t2\" >> /etc/fstab",
                                        "\n"
                                    ]
                                ]
                            }
                        }
                    },
                    "StartService": {
                        "commands": {
                            "01_enable_influxdb_service": {
                                "command": "systemctl enable influxdb"
                            },
                            "02_start_influxdb_service": {
                                "command": "systemctl start influxdb"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Data"
                    ]
                },
                "InstanceType": {
                    "Ref": "DataNodeInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SshPublicSecurityGroup"
                    },
                    {
                        "Ref": "ClusterSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "EbsOptimized": true,
                "IamInstanceProfile": {
                    "Ref": "InfluxDBInstanceProfile"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "DeleteOnTermination": true
                        }
                    },
                    {
                        "DeviceName": "/dev/sdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "DataNodeDiskSize"
                            },
                            "VolumeType": "gp2",
                            "Encrypted": true,
                            "DeleteOnTermination": false
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/usr/bin/env bash\n",
                                "set -euxo pipefail\n",
                                "yum update -y aws-cfn-bootstrap ec2-net-utils\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource DataNodeLaunchConfiguration ",
                                "        --configsets SetupNode",
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource DataNodeLaunchConfiguration",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DataNodeEniOne": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "ENI for data node one ASG",
                "GroupSet": [
                    {
                        "Ref": "SshPublicSecurityGroup"
                    },
                    {
                        "Ref": "ClusterSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "Subnets"
                        }
                    ]
                }
            }
        },
        "DataNodeDnsOne": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "DataNodeDnsOne",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "data-0.influxdb.internal",
                "Type": "A"
            }
        },
        "DataNodeVolumeOne": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Size": {
                    "Ref": "DataNodeDiskSize"
                },
                "VolumeType": "gp2",
                "Encrypted": true
            },
            "DeletionPolicy": "Retain"
        },
        "DataNodeAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "Subnets"
                        }
                    ]
                },
                "LaunchConfigurationName": {
                    "Ref": "DataNodeLaunchConfiguration"
                },
                "DesiredCapacity": "1",
                "MinSize": "0",
                "MaxSize": "1",
                "TargetGroupARNs": [
                    {
                        "Ref": "InfluxDBLoadBalancerTargetGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "eni",
                        "Value": {
                            "Ref": "DataNodeEniOne"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "volume",
                        "Value": {
                            "Ref": "DataNodeVolumeOne"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "hostname",
                        "Value": {
                            "Ref": "DataNodeDnsOne"
                        },
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT10M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 0,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "MetaNodeAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Ref": "Subnets"
                },
                "LaunchConfigurationName": {
                    "Ref": "MetaNodeLaunchConfiguration"
                },
                "MinSize": "3",
                "MaxSize": "3",
                "DesiredCapacity": {
                    "Ref": "MetaNodeInstanceCount"
                }
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "MetaNodeInstanceCount"
                    },
                    "Timeout": "PT5M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 2,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT15M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "MetaNodeLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "SetupNode": [
                            "AttachVolume",
                            "MountVolume",
                            "StartInfluxDB"
                        ]
                    },
                    "AttachVolume": {
                        "commands": {
                            "01_check_for_volume": "echo 'Attach volume here'"
                        }
                    },
                    "MountVolume": {
                        "commands": {
                            "01_mount_volumes": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "mkfs -t ext4 /dev/xvdh",
                                        "\n",
                                        "mkdir /mnt/influxdb",
                                        "\n",
                                        "mount -a",
                                        "\n",
                                        "mkdir /mnt/influxdb/meta /mnt/influxdb /mnt/influxdb/wal /mnt/influxdb/hh",
                                        "\n",
                                        "chown -R influxdb:influxdb /mnt/influxdb",
                                        "\n",
                                        "echo -e \"/dev/xvdh\t/mnt/influxdb\text4\tdefaults,nofail\t0\t2\" >> /etc/fstab",
                                        "\n"
                                    ]
                                ]
                            }
                        }
                    },
                    "StartService": {
                        "commands": {
                            "01_enable_influxdb_service": {
                                "command": "systemctl enable influxdb-meta"
                            },
                            "02_start_influxdb_service": {
                                "command": "systemctl start influxdb-meta"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Meta"
                    ]
                },
                "InstanceType": {
                    "Ref": "MetaNodeInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SshPublicSecurityGroup"
                    },
                    {
                        "Ref": "ClusterSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "InfluxDBInstanceProfile"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "DeleteOnTermination": true
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeSize": 10,
                            "VolumeType": "gp2",
                            "Encrypted": true,
                            "DeleteOnTermination": false
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/usr/bin/env bash\n",
                                "set -euxo pipefail\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource MetaNodeLaunchConfiguration ",
                                "        --configsets SetupNode",
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource MetaNodeLaunchConfiguration",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "InfluxDBPrivateHostedZone": {
            "Type": "AWS::Route53::HostedZone",
            "Properties": {
                "Name": "internal",
                "VPCs": [
                    {
                        "VPCId": {
                            "Ref": "VpcId"
                        },
                        "VPCRegion": {
                            "Ref": "AWS::Region"
                        }
                    }
                ]
            }
        },
        "InfluxDBLoadBalancerDns": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "AliasTarget": {
                    "DNSName": {
                        "Fn::GetAtt": [
                            "InfluxDBLoadBalancer",
                            "DNSName"
                        ]
                    },
                    "HostedZoneId": {
                        "Fn::GetAtt": [
                            "InfluxDBLoadBalancer",
                            "CanonicalHostedZoneNameID"
                        ]
                    }
                },
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "influxdb.internal",
                "Type": "A"
            }
        },
        "InfluxDBLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "SecurityGroups": [
                    {
                        "Ref": "PublicALBSecurityGroup"
                    }
                ],
                "Subnets": {
                    "Ref": "Subnets"
                }
            }
        },
        "InfluxDBLoadBalancerListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "InfluxDBLoadBalancerTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "InfluxDBLoadBalancer"
                },
                "Port": 8086,
                "Protocol": "HTTP"
            }
        },
        "InfluxDBLoadBalancerTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckPath": "/ping",
                "HealthCheckPort": "8086",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 10,
                "HealthyThresholdCount": 2,
                "Matcher": {
                    "HttpCode": "204"
                },
                "Port": 8086,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 2,
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "InfluxDBInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "InfluxDBRole"
                    }
                ]
            }
        },
        "InfluxDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "InfluxDBPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:DescribeVolumes",
                                        "ec2:DescribeInstances",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DescribeTags",
                                        "ec2:CreateTags",
                                        "autoscaling:DescribeAutoScalingGroups"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "PublicALBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow public traffic on port 8086 for InfluxDB",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 8086,
                        "ToPort": 8086,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "SshPublicSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow external SSH traffic from SSHLocation",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "ClusterSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow traffic on ports for InfluxDB between nodes",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "icmp",
                        "FromPort": -1,
                        "ToPort": -1,
                        "CidrIp": {
                            "Fn::GetAtt": [
                                {
                                    "Ref": "VpcId"
                                },
                                "CidrBlock"
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 8086,
                        "ToPort": 8086,
                        "SourceSecurityGroupId": {
                            "Ref": "PublicALBSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 8086,
                        "ToPort": 8086,
                        "CidrIp": {
                            "Fn::GetAtt": [
                                {
                                    "Ref": "VpcId"
                                },
                                "CidrBlock"
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "Cluster8086SecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ClusterSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8086,
                "ToPort": 8086,
                "SourceSecurityGroupId": {
                    "Ref": "ClusterSecurityGroup"
                }
            }
        },
        "Cluster8088SecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ClusterSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8088,
                "ToPort": 8088,
                "SourceSecurityGroupId": {
                    "Ref": "ClusterSecurityGroup"
                }
            }
        },
        "Cluster8089SecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ClusterSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8089,
                "ToPort": 8089,
                "SourceSecurityGroupId": {
                    "Ref": "ClusterSecurityGroup"
                }
            }
        },
        "Cluster8091SecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ClusterSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8091,
                "ToPort": 8091,
                "SourceSecurityGroupId": {
                    "Ref": "ClusterSecurityGroup"
                }
            }
        }
    }
}