{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "InfluxDB Enterprise (BYOL)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VpcId",
                        "Subnets",
                        "KeyName",
                        "SSHLocation"
                    ]
                },
                {
                    "Label": {
                        "default": "InfluxDB Configuration"
                    },
                    "Parameters": [
                        "Username",
                        "Password",
                        "InfluxDBVersion",
                        "TelegrafVersion"
                    ]
                },
                {
                    "Label": {
                        "default": "InfluxDB Data Node Configuration"
                    },
                    "Parameters": [
                        "DataNodeInstanceType",
                        "DataNodeDiskSize"
                    ]
                },
                {
                    "Label": {
                        "default": "InfluxDB Meta Node Configuration"
                    },
                    "Parameters": [
                        "MetaNodeInstanceType"
                    ]
                }
            ],
            "ParameterLabels": {
                "VpcId": {
                    "default": "VPC ID"
                },
                "Subnets": {
                    "default": "Subnets (must be in the same VPC)"
                },
                "KeyName": {
                    "default": "SSH Key Name"
                },
                "SSHLocation": {
                    "default": "SSH Access CIDR (Public IPv4 address range of the administrator's network)"
                },
                "Username": {
                    "default": "InfluxDB Administrator Username"
                },
                "Password": {
                    "default": "InfluxDB Administrator Password"
                },
                "InfluxDBVersion": {
                    "default": "InfluxDB Enterprise Version"
                },
                "TelegrafVersion": {
                    "default": "Telegraf Version"
                },
                "DataNodeInstanceType": {
                    "default": "InfluxDB Data Node Instance Type"
                },
                "DataNodeDiskSize": {
                    "default": "InfluxDB Data Node Disk Size"
                },
                "MetaNodeInstanceType": {
                    "default": "InfluxDB Meta Node Instance Type"
                }
            }
        }
    },
    "Parameters": {
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
            "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
        },
        "Subnets": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Description": "A list of SubnetIds in your Virtual Private Cloud (VPC) where nodes will be created.",
            "ConstraintDescription": "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
        },
        "AvailabilityZones": {
            "Type": "List<AWS::EC2::AvailabilityZone::Name>",
            "Description": "A list of Availability Zones for the SubnetIds parameter. AZs should be in the same order as the SubnetIds."
        },
        "Username": {
            "Description": "Username for the initial cluster administrator user",
            "Type": "String"
        },
        "Password": {
            "Description": "Password for cluster administrator user",
            "Type": "String",
            "NoEcho": true
        },
        "InfluxDBVersion": {
            "Description": "Version of InfluxDB Enterprise",
            "Type": "String",
            "Default": "1.7.7"
        },
        "TelegrafVersion": {
            "Description": "Version of Telegraf",
            "Type": "String",
            "Default": "1.11.2"
        },
        "DataNodeInstanceType": {
            "Description": "Instance type for data nodes",
            "Type": "String",
            "Default": "m5.large",
            "AllowedValues": [
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.12xlarge",
                "m5.24xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "DataNodeDiskSize": {
            "Description": "Size in GB of the EBS gp2 volume on each data node",
            "Type": "Number",
            "Default": 100
        },
        "MetaNodeInstanceType": {
            "Description": "Instance type for meta nodes",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "t2.large"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Outputs": {
        "InfluxDBAPIEndpoint": {
            "Description": "The ALB endpoint that can be used to access the InfluxDB API. Listens on port 8086.",
            "Value": {
                "Fn::GetAtt": [
                    "InfluxDBLoadBalancer",
                    "DNSName"
                ]
            }
        }
    },
    "Mappings": {
        "AMIRegionMap": {
            "us-east-1": {
                "Data": "ami-00b088931a3b20333",
                "Meta": "ami-07ac60e7255bf7bbe",
                "Monitor": "ami-0f96a39a7250beb80"
            }
        }
    },
    "Resources": {
        "InfluxDBPrivateHostedZone": {
            "Type": "AWS::Route53::HostedZone",
            "Properties": {
                "Name": "internal",
                "VPCs": [
                    {
                        "VPCId": {
                            "Ref": "VpcId"
                        },
                        "VPCRegion": {
                            "Ref": "AWS::Region"
                        }
                    }
                ]
            }
        },
        "InfluxDBLoadBalancerDns": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "AliasTarget": {
                    "DNSName": {
                        "Fn::GetAtt": [
                            "InfluxDBLoadBalancer",
                            "DNSName"
                        ]
                    },
                    "HostedZoneId": {
                        "Fn::GetAtt": [
                            "InfluxDBLoadBalancer",
                            "CanonicalHostedZoneID"
                        ]
                    }
                },
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "influxdb.internal",
                "Type": "A"
            }
        },
        "InfluxDBLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "SecurityGroups": [
                    {
                        "Ref": "InfluxDBALBSecurityGroup"
                    }
                ],
                "Subnets": {
                    "Ref": "Subnets"
                }
            }
        },
        "InfluxDBLoadBalancerListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "InfluxDBLoadBalancerTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "InfluxDBLoadBalancer"
                },
                "Port": 8086,
                "Protocol": "HTTP"
            }
        },
        "InfluxDBLoadBalancerTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckPath": "/ping",
                "HealthCheckPort": "8086",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 10,
                "HealthyThresholdCount": 2,
                "Matcher": {
                    "HttpCode": "204"
                },
                "Port": 8086,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 2,
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "InfluxDBInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "InfluxDBRole"
                    }
                ]
            }
        },
        "InfluxDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "InfluxDBPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:DescribeVolumes",
                                        "ec2:DescribeInstances",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DescribeTags",
                                        "autoscaling:DescribeAutoScalingGroups"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "InfluxDBALBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow public traffic on port 8086 for InfluxDB",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 8086,
                        "ToPort": 8086,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "SshSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow external SSH traffic from SSHLocation",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "InfluxDBInternalSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow traffic on ports for InfluxDB between nodes",
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "InfluxDBSGIngressALB": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8086,
                "ToPort": 8086,
                "SourceSecurityGroupId": {
                    "Ref": "InfluxDBALBSecurityGroup"
                }
            }
        },
        "InfluxDBSGIngressICMP": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                },
                "IpProtocol": "icmp",
                "FromPort": -1,
                "ToPort": -1,
                "SourceSecurityGroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                }
            }
        },
        "InfluxDBSGIngress8086": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8086,
                "ToPort": 8086,
                "SourceSecurityGroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                }
            }
        },
        "InfluxDBSGI8088": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8088,
                "ToPort": 8088,
                "SourceSecurityGroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                }
            }
        },
        "InfluxDBSGI8089": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8089,
                "ToPort": 8089,
                "SourceSecurityGroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                }
            }
        },
        "InfluxDBSGI8091": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8091,
                "ToPort": 8091,
                "SourceSecurityGroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                }
            }
        },
        "MetaNodeLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "SetupNode": [
                            "SetAWSCLIRegion",
                            "SetLicense",
                            "SetHostnames",
                            "AttachNetwork",
                            "AttachVolume",
                            "MountVolume",
                            "UpdateInfluxDB",
                            "UpdateTelegraf",
                            "StartInfluxDB",
                            "StartTelegraf",
                            "ConfigureCluster"
                        ]
                    },
                    "SetAWSCLIRegion": {
                        "files": {
                            "/root/.aws/config": {
                                "content": {
                                    "Fn::Sub": "[default]\nregion = ${AWS::Region}\n"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "SetLicense": {
                        "files": {
                            "/etc/default/influxdb": {
                                "contents": "INFLUXDB_ENTERPRISE_MARKETPLACE_ENV=aws",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "SetHostnames": {
                        "commands": {
                            "01_set_instance_hostname": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                            "INFLUXDB_HOSTNAME=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-hostname'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "hostnamectl set-hostname $INFLUXDB_HOSTNAME",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "02_set_influxdb_hostname": {
                                "command": "echo \"INFLUXDB_HOSTNAME=$HOSTNAME\" >> /etc/default/influxdb"
                            }
                        }
                    },
                    "AttachNetwork": {
                        "commands": {
                            "01_attach_network": {
                                "command": {
                                    "Fn:Join": [
                                        "",
                                        [
                                            "# If network interface is not attached to this instance, then attach it",
                                            "\n",
                                            "INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                            "\n",
                                            "ENI_ID=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-eni'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "STATUS=$( aws ec2 describe-network-interfaces",
                                            "        --network-interface-ids $ENI_ID",
                                            "        --filters \"Name=attachment.instance-id,Values=$INSTANCE_ID\"",
                                            "        --query \"NetworkInterfaces[0].Attachment.Status\"",
                                            "        --output text )",
                                            "\n",
                                            "# TODO: switch to until 'attached' loop",
                                            "\n",
                                            "if [ $STATUS != 'attached' ]; then",
                                            "\n",
                                            "# Wait until network interface is available",
                                            "\n",
                                            "aws ec2 wait network-interface-available",
                                            "        --network-interface-ids $ENI_ID",
                                            "\n",
                                            "aws ec2 attach-network-interface",
                                            "        --network-interface-id $ENI_ID",
                                            "        --instance-id $INSTANCE_ID",
                                            "        --device-index 1",
                                            "\n",
                                            "# Reload network to automatically enable eth1 via Amazon Linux 2 ec2-net-utils",
                                            "\n",
                                            "systemctl restart network",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "AttachVolume": {
                        "commands": {
                            "01_attach_volume": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "# If EBS volume is not attached to this instance, then attach it",
                                            "\n",
                                            "INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                            "\n",
                                            "VOLUME_ID=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-volume'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "STATUS=$( aws ec2 describe-volumes",
                                            "        --volume-ids $VOLUME_ID",
                                            "        --filters \"Name=attachment.instance-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Volumes[0].Attachments[0].State\"",
                                            "        --output text )",
                                            "\n",
                                            "# TODO: switch to until 'attached' loop",
                                            "\n",
                                            "if [ $STATUS != 'attached' ]; then",
                                            "\n",
                                            "# Wait until network interface is available",
                                            "\n",
                                            "aws ec2 wait volume-available",
                                            "        --volume-ids $VOLUME_ID",
                                            "\n",
                                            "aws ec2 attach-volume",
                                            "        --volume-id $VOLUME_ID",
                                            "        --instance-id $INSTANCE_ID",
                                            "        --device /dev/xvdh",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "MountVolume": {
                        "commands": {
                            "01_mount_volumes": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "if [ \"$(lsblk -no FSTYPE /dev/xvdh)\" == \"ext4\" ]; then",
                                            "\n",
                                            "mkfs -t ext4 /dev/xvdh",
                                            "\n",
                                            "fi",
                                            "\n",
                                            "mkdir /influxdb",
                                            "\n",
                                            "mount /dev/xvdh /influxdb",
                                            "\n",
                                            "mkdir /influxdb/meta /influxdb /influxdb/wal /influxdb/hh",
                                            "\n",
                                            "chown -R influxdb:influxdb /influxdb",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "02_set_fstab": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cp /etc/fstab /etc/fstab.original",
                                            "\n",
                                            "echo -e \"/dev/xvdh\t/influxdb\text4\tdefaults,nofail\t0\t2\" >> /etc/fstab",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "UpdateInfluxDB": {
                        "commands": {
                            "01_download_influxdb": {
                                "command": {
                                    "Fn::Sub": "curl -s https://dl.influxdata.com/enterprise/releases/influxdb-meta-${InfluxDBVersion}_c${InfluxDBVersion}.x86_64.rpm --output influxdb-meta-${InfluxDBVersion}_c${InfluxDBVersion}.x86_64.rpm"
                                }
                            },
                            "02_install_influxdb": {
                                "command": {
                                    "Fn::Sub": "yum localinstall -y -q influxdb-meta-${InfluxDBVersion}_c${InfluxDBVersion}.x86_64.rpm"
                                }
                            },
                            "03_remove_package_file": {
                                "command": {
                                    "Fn::Sub": "rm influxdb-meta-${InfluxDBVersion}_c${InfluxDBVersion}.x86_64.rpm"
                                }
                            }
                        }
                    },
                    "UpdateTelegraf": {
                        "commands": {
                            "01_download_telegraf": {
                                "command": {
                                    "Fn::Sub": "curl -s https://dl.influxdata.com/telegraf/releases/telegraf-${TelegrafVersion}-1.x86_64.rpm --output telegraf-${TelegrafVersion}-1.x86_64.rpm"
                                }
                            },
                            "02_install_telegraf": {
                                "command": {
                                    "Fn::Sub": "yum localinstall -y -q telegraf-${TelegrafVersion}-1.x86_64.rpm"
                                }
                            },
                            "03_remove_package_file": {
                                "command": {
                                    "Fn::Sub": "rm telegraf-${TelegrafVersion}-1.x86_64.rpm"
                                }
                            }
                        }
                    },
                    "StartInfluxDB": {
                        "commands": {
                            "01_enable_influxdb_service": {
                                "command": "systemctl enable influxdb-meta"
                            },
                            "02_start_influxdb_service": {
                                "command": "systemctl start influxdb-meta"
                            }
                        }
                    },
                    "StartTelegraf": {
                        "commands": {
                            "01_enable_telegraf_service": {
                                "command": "systemctl enable telegraf"
                            },
                            "02_start_telegraf_service": {
                                "command": "systemctl start telegraf"
                            }
                        }
                    },
                    "ConfigureCluster": {
                        "commands": {
                            "01_join_nodes": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                            "\n",
                                            "LEADER=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-leader'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "if [ $LEADER == 'true' ]; then",
                                            "\n",
                                            "influxd-ctl add-meta ",
                                            {
                                                "Ref": "MetaNodeDns00"
                                            },
                                            ":8091",
                                            "\n",
                                            "influxd-ctl add-meta ",
                                            {
                                                "Ref": "MetaNodeDns01"
                                            },
                                            ":8091",
                                            "\n",
                                            "influxd-ctl add-meta ",
                                            {
                                                "Ref": "MetaNodeDns02"
                                            },
                                            ":8091",
                                            "\n",
                                            "influxd-ctl add-data ",
                                            {
                                                "Ref": "DataNodeDns03"
                                            },
                                            ":8088",
                                            "\n",
                                            "influxd-ctl add-data ",
                                            {
                                                "Ref": "DataNodeDns04"
                                            },
                                            ":8088",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "02_create_influxdb_user": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "curl -s -u ",
                                            {
                                                "Ref": "Username"
                                            },
                                            ":",
                                            {
                                                "Ref": "Password"
                                            },
                                            " \"http://",
                                            {
                                                "Ref": "InfluxDBLoadBalancerDns"
                                            },
                                            ":8086/query\"",
                                            "        --data-urlencode 'q=\"",
                                            "CREATE USER ",
                                            {
                                                "Ref": "Username"
                                            },
                                            " WITH PASSWORD '",
                                            {
                                                "Ref": "Password"
                                            },
                                            "' WITH ALL PRIVILEGES",
                                            "\"'",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Data"
                    ]
                },
                "InstanceType": {
                    "Ref": "MetaNodeInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SshSecurityGroup"
                    },
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "EbsOptimized": true,
                "IamInstanceProfile": {
                    "Ref": "InfluxDBInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/usr/bin/env bash\n",
                                "set -euxo pipefail\n",
                                "yum update -y aws-cfn-bootstrap ec2-net-utils\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource MetaNodeLaunchConfiguration ",
                                "        --configsets SetupNode",
                                "\n",
                                "INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                "\n",
                                "ASG_NAME=$( aws ec2 describe-tags",
                                "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                "        --query \"Tags[?Key=='aws:autoscaling:groupName'].Value\"",
                                "        --output text )",
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource $ASG_NAME",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "MetaNodeEni00": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "ENI for data node one ASG",
                "GroupSet": [
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "Subnets"
                        }
                    ]
                }
            }
        },
        "MetaNodeDns00": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "MetaNodeEni00",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "data-0.influxdb.internal",
                "Type": "A"
            }
        },
        "MetaNodeVolume00": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Size": 20,
                "VolumeType": "gp2",
                "Encrypted": true
            },
            "DeletionPolicy": "Retain"
        },
        "MetaNodeAutoScalingGroup00": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "Subnets"
                        }
                    ]
                },
                "LaunchConfigurationName": {
                    "Ref": "MetaNodeLaunchConfiguration"
                },
                "DesiredCapacity": "1",
                "MinSize": "0",
                "MaxSize": "1",
                "TargetGroupARNs": [
                    {
                        "Ref": "InfluxDBLoadBalancerTargetGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "influxdb-eni",
                        "Value": {
                            "Ref": "MetaNodeEni00"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-volume",
                        "Value": {
                            "Ref": "MetaNodeVolume00"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-hostname",
                        "Value": {
                            "Ref": "MetaNodeDns00"
                        },
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT10M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 0,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "MetaNodeEni01": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "ENI for data node one ASG",
                "GroupSet": [
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Fn::Select": [
                        1,
                        {
                            "Ref": "Subnets"
                        }
                    ]
                }
            }
        },
        "MetaNodeDns01": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "MetaNodeEni01",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "data-1.influxdb.internal",
                "Type": "A"
            }
        },
        "MetaNodeVolume01": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Size": 20,
                "VolumeType": "gp2",
                "Encrypted": true
            },
            "DeletionPolicy": "Retain"
        },
        "MetaNodeAutoScalingGroup01": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Fn::Select": [
                        1,
                        {
                            "Ref": "Subnets"
                        }
                    ]
                },
                "LaunchConfigurationName": {
                    "Ref": "MetaNodeLaunchConfiguration"
                },
                "DesiredCapacity": "1",
                "MinSize": "0",
                "MaxSize": "1",
                "TargetGroupARNs": [
                    {
                        "Ref": "InfluxDBLoadBalancerTargetGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "influxdb-eni",
                        "Value": {
                            "Ref": "MetaNodeEni01"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-volume",
                        "Value": {
                            "Ref": "MetaNodeVolume01"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-hostname",
                        "Value": {
                            "Ref": "MetaNodeDns01"
                        },
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT10M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 0,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "MetaNodeEni02": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "ENI for data node one ASG",
                "GroupSet": [
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Fn::Select": [
                        2,
                        {
                            "Ref": "Subnets"
                        }
                    ]
                }
            }
        },
        "MetaNodeDns02": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "MetaNodeEni02",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "data-2.influxdb.internal",
                "Type": "A"
            }
        },
        "MetaNodeVolume02": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        2,
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Size": 20,
                "VolumeType": "gp2",
                "Encrypted": true
            },
            "DeletionPolicy": "Retain"
        },
        "MetaNodeAutoScalingGroup02": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Fn::Select": [
                        2,
                        {
                            "Ref": "Subnets"
                        }
                    ]
                },
                "LaunchConfigurationName": {
                    "Ref": "MetaNodeLaunchConfiguration"
                },
                "DesiredCapacity": "1",
                "MinSize": "0",
                "MaxSize": "1",
                "TargetGroupARNs": [
                    {
                        "Ref": "InfluxDBLoadBalancerTargetGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "influxdb-eni",
                        "Value": {
                            "Ref": "MetaNodeEni02"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-volume",
                        "Value": {
                            "Ref": "MetaNodeVolume02"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-hostname",
                        "Value": {
                            "Ref": "MetaNodeDns02"
                        },
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT10M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 0,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "DataNodeLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "SetupNode": [
                            "SetAWSCLIRegion",
                            "SetLicense",
                            "SetHostnames",
                            "AttachNetwork",
                            "AttachVolume",
                            "MountVolume",
                            "UpdateInfluxDB",
                            "UpdateTelegraf",
                            "StartInfluxDB",
                            "StartTelegraf",
                            "ConfigureCluster"
                        ]
                    },
                    "SetAWSCLIRegion": {
                        "files": {
                            "/root/.aws/config": {
                                "content": {
                                    "Fn::Sub": "[default]\nregion = ${AWS::Region}\n"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "SetLicense": {
                        "files": {
                            "/etc/default/influxdb": {
                                "contents": "INFLUXDB_ENTERPRISE_MARKETPLACE_ENV=aws",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "SetHostnames": {
                        "commands": {
                            "01_set_instance_hostname": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                            "INFLUXDB_HOSTNAME=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-hostname'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "hostnamectl set-hostname $INFLUXDB_HOSTNAME",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "02_set_influxdb_hostname": {
                                "command": "echo \"INFLUXDB_HOSTNAME=$HOSTNAME\" >> /etc/default/influxdb"
                            }
                        }
                    },
                    "AttachNetwork": {
                        "commands": {
                            "01_attach_network": {
                                "command": {
                                    "Fn:Join": [
                                        "",
                                        [
                                            "# If network interface is not attached to this instance, then attach it",
                                            "\n",
                                            "INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                            "\n",
                                            "ENI_ID=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-eni'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "STATUS=$( aws ec2 describe-network-interfaces",
                                            "        --network-interface-ids $ENI_ID",
                                            "        --filters \"Name=attachment.instance-id,Values=$INSTANCE_ID\"",
                                            "        --query \"NetworkInterfaces[0].Attachment.Status\"",
                                            "        --output text )",
                                            "\n",
                                            "# TODO: switch to until 'attached' loop",
                                            "\n",
                                            "if [ $STATUS != 'attached' ]; then",
                                            "\n",
                                            "# Wait until network interface is available",
                                            "\n",
                                            "aws ec2 wait network-interface-available",
                                            "        --network-interface-ids $ENI_ID",
                                            "\n",
                                            "aws ec2 attach-network-interface",
                                            "        --network-interface-id $ENI_ID",
                                            "        --instance-id $INSTANCE_ID",
                                            "        --device-index 1",
                                            "\n",
                                            "# Reload network to automatically enable eth1 via Amazon Linux 2 ec2-net-utils",
                                            "\n",
                                            "systemctl restart network",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "AttachVolume": {
                        "commands": {
                            "01_attach_volume": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "# If EBS volume is not attached to this instance, then attach it",
                                            "\n",
                                            "INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                            "\n",
                                            "VOLUME_ID=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-volume'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "STATUS=$( aws ec2 describe-volumes",
                                            "        --volume-ids $VOLUME_ID",
                                            "        --filters \"Name=attachment.instance-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Volumes[0].Attachments[0].State\"",
                                            "        --output text )",
                                            "\n",
                                            "# TODO: switch to until 'attached' loop",
                                            "\n",
                                            "if [ $STATUS != 'attached' ]; then",
                                            "\n",
                                            "# Wait until network interface is available",
                                            "\n",
                                            "aws ec2 wait volume-available",
                                            "        --volume-ids $VOLUME_ID",
                                            "\n",
                                            "aws ec2 attach-volume",
                                            "        --volume-id $VOLUME_ID",
                                            "        --instance-id $INSTANCE_ID",
                                            "        --device /dev/xvdh",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "MountVolume": {
                        "commands": {
                            "01_mount_volumes": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "if [ \"$(lsblk -no FSTYPE /dev/xvdh)\" == \"ext4\" ]; then",
                                            "\n",
                                            "mkfs -t ext4 /dev/xvdh",
                                            "\n",
                                            "fi",
                                            "\n",
                                            "mkdir /influxdb",
                                            "\n",
                                            "mount /dev/xvdh /influxdb",
                                            "\n",
                                            "mkdir /influxdb/meta /influxdb /influxdb/wal /influxdb/hh",
                                            "\n",
                                            "chown -R influxdb:influxdb /influxdb",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "02_set_fstab": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "cp /etc/fstab /etc/fstab.original",
                                            "\n",
                                            "echo -e \"/dev/xvdh\t/influxdb\text4\tdefaults,nofail\t0\t2\" >> /etc/fstab",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "UpdateInfluxDB": {
                        "commands": {
                            "01_download_influxdb": {
                                "command": {
                                    "Fn::Sub": "curl -s https://dl.influxdata.com/enterprise/releases/influxdb-data-${InfluxDBVersion}_c${InfluxDBVersion}.x86_64.rpm --output influxdb-data-${InfluxDBVersion}_c${InfluxDBVersion}.x86_64.rpm"
                                }
                            },
                            "02_install_influxdb": {
                                "command": {
                                    "Fn::Sub": "yum localinstall -y -q influxdb-data-${InfluxDBVersion}_c${InfluxDBVersion}.x86_64.rpm"
                                }
                            },
                            "03_remove_package_file": {
                                "command": {
                                    "Fn::Sub": "rm influxdb-data-${InfluxDBVersion}_c${InfluxDBVersion}.x86_64.rpm"
                                }
                            }
                        }
                    },
                    "UpdateTelegraf": {
                        "commands": {
                            "01_download_telegraf": {
                                "command": {
                                    "Fn::Sub": "curl -s https://dl.influxdata.com/telegraf/releases/telegraf-${TelegrafVersion}-1.x86_64.rpm --output telegraf-${TelegrafVersion}-1.x86_64.rpm"
                                }
                            },
                            "02_install_telegraf": {
                                "command": {
                                    "Fn::Sub": "yum localinstall -y -q telegraf-${TelegrafVersion}-1.x86_64.rpm"
                                }
                            },
                            "03_remove_package_file": {
                                "command": {
                                    "Fn::Sub": "rm telegraf-${TelegrafVersion}-1.x86_64.rpm"
                                }
                            }
                        }
                    },
                    "StartInfluxDB": {
                        "commands": {
                            "01_enable_influxdb_service": {
                                "command": "systemctl enable influxdb"
                            },
                            "02_start_influxdb_service": {
                                "command": "systemctl start influxdb"
                            }
                        }
                    },
                    "StartTelegraf": {
                        "commands": {
                            "01_enable_telegraf_service": {
                                "command": "systemctl enable telegraf"
                            },
                            "02_start_telegraf_service": {
                                "command": "systemctl start telegraf"
                            }
                        }
                    },
                    "ConfigureCluster": {
                        "commands": {
                            "01_join_nodes": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                            "\n",
                                            "LEADER=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-leader'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "if [ $LEADER == 'true' ]; then",
                                            "\n",
                                            "influxd-ctl add-meta ",
                                            {
                                                "Ref": "MetaNodeDns00"
                                            },
                                            ":8091",
                                            "\n",
                                            "influxd-ctl add-meta ",
                                            {
                                                "Ref": "MetaNodeDns01"
                                            },
                                            ":8091",
                                            "\n",
                                            "influxd-ctl add-meta ",
                                            {
                                                "Ref": "MetaNodeDns02"
                                            },
                                            ":8091",
                                            "\n",
                                            "influxd-ctl add-data ",
                                            {
                                                "Ref": "DataNodeDns03"
                                            },
                                            ":8088",
                                            "\n",
                                            "influxd-ctl add-data ",
                                            {
                                                "Ref": "DataNodeDns04"
                                            },
                                            ":8088",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "02_create_influxdb_user": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "curl -s -u ",
                                            {
                                                "Ref": "Username"
                                            },
                                            ":",
                                            {
                                                "Ref": "Password"
                                            },
                                            " \"http://",
                                            {
                                                "Ref": "InfluxDBLoadBalancerDns"
                                            },
                                            ":8086/query\"",
                                            "        --data-urlencode 'q=\"",
                                            "CREATE USER ",
                                            {
                                                "Ref": "Username"
                                            },
                                            " WITH PASSWORD '",
                                            {
                                                "Ref": "Password"
                                            },
                                            "' WITH ALL PRIVILEGES",
                                            "\"'",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Data"
                    ]
                },
                "InstanceType": {
                    "Ref": "DataNodeInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SshSecurityGroup"
                    },
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "EbsOptimized": true,
                "IamInstanceProfile": {
                    "Ref": "InfluxDBInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/usr/bin/env bash\n",
                                "set -euxo pipefail\n",
                                "yum update -y aws-cfn-bootstrap ec2-net-utils\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource DataNodeLaunchConfiguration ",
                                "        --configsets SetupNode",
                                "\n",
                                "INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                "\n",
                                "ASG_NAME=$( aws ec2 describe-tags",
                                "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                "        --query \"Tags[?Key=='aws:autoscaling:groupName'].Value\"",
                                "        --output text )",
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource $ASG_NAME",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DataNodeEni03": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "ENI for data node one ASG",
                "GroupSet": [
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "Subnets"
                        }
                    ]
                }
            }
        },
        "DataNodeDns03": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "DataNodeEni03",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "data-3.influxdb.internal",
                "Type": "A"
            }
        },
        "DataNodeVolume03": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Size": {
                    "Ref": "DataNodeDiskSize"
                },
                "VolumeType": "gp2",
                "Encrypted": true
            },
            "DeletionPolicy": "Retain"
        },
        "DataNodeAutoScalingGroup03": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "Subnets"
                        }
                    ]
                },
                "LaunchConfigurationName": {
                    "Ref": "DataNodeLaunchConfiguration"
                },
                "DesiredCapacity": "1",
                "MinSize": "0",
                "MaxSize": "1",
                "TargetGroupARNs": [
                    {
                        "Ref": "InfluxDBLoadBalancerTargetGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "influxdb-eni",
                        "Value": {
                            "Ref": "DataNodeEni03"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-volume",
                        "Value": {
                            "Ref": "DataNodeVolume03"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-hostname",
                        "Value": {
                            "Ref": "DataNodeDns03"
                        },
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT10M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 0,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "DataNodeEni04": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "ENI for data node one ASG",
                "GroupSet": [
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Fn::Select": [
                        1,
                        {
                            "Ref": "Subnets"
                        }
                    ]
                }
            }
        },
        "DataNodeDns04": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "DataNodeEni04",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "data-4.influxdb.internal",
                "Type": "A"
            }
        },
        "DataNodeVolume04": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Size": {
                    "Ref": "DataNodeDiskSize"
                },
                "VolumeType": "gp2",
                "Encrypted": true
            },
            "DeletionPolicy": "Retain"
        },
        "DataNodeAutoScalingGroup04": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Fn::Select": [
                        1,
                        {
                            "Ref": "Subnets"
                        }
                    ]
                },
                "LaunchConfigurationName": {
                    "Ref": "DataNodeLaunchConfiguration"
                },
                "DesiredCapacity": "1",
                "MinSize": "0",
                "MaxSize": "1",
                "TargetGroupARNs": [
                    {
                        "Ref": "InfluxDBLoadBalancerTargetGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "influxdb-eni",
                        "Value": {
                            "Ref": "DataNodeEni04"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-volume",
                        "Value": {
                            "Ref": "DataNodeVolume04"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-hostname",
                        "Value": {
                            "Ref": "DataNodeDns04"
                        },
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT10M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 0,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        }
    }
}