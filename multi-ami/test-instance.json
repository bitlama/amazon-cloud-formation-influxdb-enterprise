{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "InfluxDB Enterprise (BYOL)",
    "Parameters": {
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
            "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
        },
        "Subnets": {
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
            "ConstraintDescription": "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
        },
        "LicenseKey": {
            "Description": "A license key is required to deploy this solution, E.g a1b2c3d4-xxxx-xxxx-xxxx-xxxxxxxxxxxx. Visit https://portal.influxdata.com/users/aws for a free trial",
            "Type": "String"
        },
        "Username": {
            "Description": "Username for the initial cluster administrator user",
            "Type": "String"
        },
        "Password": {
            "Description": "Password for cluster administrator user",
            "Type": "String",
            "NoEcho": true
        },
        "InfluxDBVersion": {
            "Description": "Version of InfluxDB Enterprise",
            "Type": "String",
            "Default": "1.7.7"
        },
        "TelegrafVersion": {
            "Description": "Version of Telegraf",
            "Type": "String",
            "Default": "1.11.2"
        },
        "DataNodeInstanceCount": {
            "Description": "Number of data nodes",
            "Type": "Number",
            "Default": 2
        },
        "DataNodeInstanceType": {
            "Description": "Instance type for data nodes",
            "Type": "String",
            "Default": "m5.large",
            "AllowedValues": [
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m4.16xlarge",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.12xlarge",
                "m5.24xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge",
                "c5.18xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.16xlarge",
                "r5.large",
                "r5.xlarge",
                "r5.2xlarge",
                "r5.4xlarge",
                "r5.12xlarge",
                "r5.24xlarge",
                "i3.large",
                "i3.xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.16xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "DataNodeDiskSize": {
            "Description": "Size in GB of the EBS gp2 volume on each data node",
            "Type": "Number",
            "Default": 100
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Mappings": {
        "AMIRegionMap": {
            "us-east-1": {
                "Data": "ami-086e1e301ef89a7a7",
                "Meta": "ami-01f4a0c2d4309c347",
                "Monitor": "ami-09293eb6f6d59e3ed"
            }
        }
    },
    "Resources": {
        "DataNodeAutoScalingGroup": {
            "Type": "AWS::EC2::Instance",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": {
                        "Ref": "DataNodeInstanceCount"
                    },
                    "Timeout": "PT5M"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "SetupNode": [
                            "UpdatePackages",
                            "SetLicenseKey"
                        ],
                        "ConfigureHostname": [
                            "ConfigureHostname"
                        ]
                    },
                    "UpdateInflux": {
                        "packages": {
                            "rpm": {
                                "influxdb": {
                                    "Fn::Sub": "https://dl.influxdata.com/enterprise/releases/influxdb-data-${InfluxDBVersion}_c${InfluxDBVersion}.x86_64.rpm"
                                },
                                "telegraf": {
                                    "Fn::Sub": "https://dl.influxdata.com/telegraf/releases/telegraf-${TelegrafVersion}-1.x86_64.rpm"
                                }
                            }
                        }
                    },
                    "UpdateAWSCLI": {
                        "packages": {
                            "yum": {
                                "awscli": ""
                            }
                        }
                    },
                    "SetInfluxEnv": {
                        "commands": {
                            "01_set_influx_env": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "echo \"INFLUXDB_ENTERPRISE_LICENSE_KEY=",
                                        {
                                            "Ref": "LicenseKey"
                                        },
                                        "\" >> /etc/default/influxdb\n",
                                        "HOSTNAME=$(/usr/bin/curl --location --silent --fail --show-error http://169.254.169.254/latest/meta-data/hostname)",
                                        "echo \"INFLUXDB_HOSTNAME=${!HOSTNAME}\" >> /etc/default/influxdb\n"
                                    ]
                                ]
                            }
                        }
                    },
                    "MountVolume": {
                        "commands": {
                            "01_set_hostname": "echo -n \"INFLUXDB_HOSTNAME=$(curl --location --silent --fail --show-error http://169.254.169.254/latest/meta-data/hostname)\" >> /etc/default/influxdb",
                            "02_mount_volumes": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "mkfs -t ext4 /dev/xvdh",
                                        "\n",
                                        "mkdir /mnt/influxdb",
                                        "\n",
                                        "mount -a",
                                        "\n",
                                        "mkdir /mnt/influxdb/meta /mnt/influxdb /mnt/influxdb/wal /mnt/influxdb/hh",
                                        "\n",
                                        "chown -R influxdb:influxdb /mnt/influxdb",
                                        "\n",
                                        "echo -e \"/dev/xvdh\t/mnt/influxdb\text4\tdefaults,nofail\t0\t2\" >> /etc/fstab",
                                        "\n"
                                    ]
                                ]
                            }
                        }
                    }
                },
                "StartService": {
                    "commands": {
                        "01_enable_influxdb_service": {
                            "command": "systemctl enable influxdb"
                        },
                        "02_start_influxdb_service": {
                            "command": "systemctl start influxdb"
                        }
                    }
                },
                "CreateAdminUser": {
                    "commands": {
                        "01_create_admin": {
                            "Fn::Join": [
                                "",
                                [
                                    "influx -execute \"CREATE USER ",
                                    {
                                        "Ref": "Username"
                                    },
                                    " WITH PASSWORD '",
                                    {
                                        "Ref": "Password"
                                    },
                                    "' WITH ALL PRIVILEGES\""
                                ]
                            ]
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Data"
                    ]
                },
                "InstanceType": {
                    "Ref": "DataNodeInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "ClusterSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "EbsOptimized": true,
                "IamInstanceProfile": {
                    "Ref": "InfluxDBInstanceProfile"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "DataNodeDiskSize"
                            },
                            "VolumeType": "gp2",
                            "Encrypted": true,
                            "DeleteOnTermination": false
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/usr/bin/env bash\n",
                                "set -euxo pipefail\n",
                                "yum update -y aws-cfn-bootstrap\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource DataNodeLaunchConfiguration ",
                                "        --configsets SetupNode",
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource DataNodeLaunchConfiguration",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "InfluxDBInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "InfluxDBRole"
                    }
                ]
            }
        },
        "InfluxDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "InfluxDBPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateTags",
                                        "ec2:DescribeTags",
                                        "ec2:DescribeInstances",
                                        "autoscaling:DescribeAutoScalingGroups"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ClusterSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow traffic on ports for InfluxDB between nodes, and SSH from SSHLocation",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    },
                    {
                        "IpProtocol": "icmp",
                        "FromPort": -1,
                        "ToPort": -1,
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "ClusterSecurityGroupIngress8086": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ClusterSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8086,
                "ToPort": 8086,
                "SourceSecurityGroupId": {
                    "Ref": "ClusterSecurityGroup"
                }
            }
        },
        "ClusterSecurityGroupIngress8088": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ClusterSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8088,
                "ToPort": 8088,
                "SourceSecurityGroupId": {
                    "Ref": "ClusterSecurityGroup"
                }
            }
        },
        "ClusterSecurityGroupIngress8089": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ClusterSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8089,
                "ToPort": 8089,
                "SourceSecurityGroupId": {
                    "Ref": "ClusterSecurityGroup"
                }
            }
        },
        "ClusterSecurityGroupIngress8091": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ClusterSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8091,
                "ToPort": 8091,
                "SourceSecurityGroupId": {
                    "Ref": "ClusterSecurityGroup"
                }
            }
        }
    }
}